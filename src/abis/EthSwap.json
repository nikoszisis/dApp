{
  "contractName": "EthSwap",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/nikolaoszisis/Desktop/Projects/Github/dApp/ERC20-swap/src/contracts/EthSwap.sol\":\"EthSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/nikolaoszisis/Desktop/Projects/Github/dApp/ERC20-swap/src/contracts/EthSwap.sol\":{\"keccak256\":\"0x0cd75d3c72bfe9c3e94662e57916d5057aae8cd09625a70c7e4c2d811236c789\",\"urls\":[\"bzz-raw://c2fc0d32cdc8fb0ae0b498437fd61b81fe3dc79ecb9ae64293c1e72c719ad549\",\"dweb:/ipfs/QmTozGPLvuqWHGuLCWyPYghdPGHZWzoV1zaK2WC4P7L8te\"]}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280601881526020017f4574685377617020496e7374616e742045786368616e676500000000000000008152506000908051906020019061004f929190610062565b5034801561005c57600080fd5b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b610186806101166000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806306fdde0314610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101495780601f1061011e57610100808354040283529160200191610149565b820191906000526020600020905b81548152906001019060200180831161012c57829003601f168201915b50505050508156fea265627a7a7231582003895f838647aa2702699c4d5404d7f44e8d7b69257138858a491d1b15b467f364736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806306fdde0314610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101495780601f1061011e57610100808354040283529160200191610149565b820191906000526020600020905b81548152906001019060200180831161012c57829003601f168201915b50505050508156fea265627a7a7231582003895f838647aa2702699c4d5404d7f44e8d7b69257138858a491d1b15b467f364736f6c63430005100032",
  "sourceMap": "98:74:0:-;;;121:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;98:74;8:9:-1;5:2;;;30:1;27;20:12;5:2;98:74:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "98:74:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;98:74:0;;;;;;;;;;;;;;;;;;;121:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;121:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "// https://eips.ethereum.org/EIPS/eip-20\n// SPDX-License-Identifier: MIT\npragma solidity ^0.5.0;\n\ncontract EthSwap {\n    string public name = 'EthSwap Instant Exchange'; \n}\n\n// interface Token {\n\n//     /// @param _owner The address from which the balance will be retrieved\n//     /// @return balance the balance\n//     function balanceOf(address _owner) external view returns (uint256 balance);\n\n//     /// @notice send `_value` token to `_to` from `msg.sender`\n//     /// @param _to The address of the recipient\n//     /// @param _value The amount of token to be transferred\n//     /// @return success Whether the transfer was successful or not\n//     function transfer(address _to, uint256 _value)  external returns (bool success);\n\n//     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n//     /// @param _from The address of the sender\n//     /// @param _to The address of the recipient\n//     /// @param _value The amount of token to be transferred\n//     /// @return success Whether the transfer was successful or not\n//     function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n//     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n//     /// @param _spender The address of the account able to transfer the tokens\n//     /// @param _value The amount of wei to be approved for transfer\n//     /// @return success Whether the approval was successful or not\n//     function approve(address _spender  , uint256 _value) external returns (bool success);\n\n//     /// @param _owner The address of the account owning tokens\n//     /// @param _spender The address of the account able to transfer the tokens\n//     /// @return remaining Amount of remaining tokens allowed to spent\n//     function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n//     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n//     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n// }\n\n// contract Standard_Token is Token {\n//     uint256 constant private MAX_UINT256 = 2**256 - 1;\n//     mapping (address => uint256) public balances;\n//     mapping (address => mapping (address => uint256)) public allowed;\n//     uint256 public totalSupply;\n//     /*\n//     NOTE:\n//     The following variables are OPTIONAL vanities. One does not have to include them.\n//     They allow one to customise the token contract & in no way influences the core functionality.\n//     Some wallets/interfaces might not even bother to look at this information.\n//     */\n//     string public name;                   //fancy name: eg Simon Bucks\n//     uint8 public decimals;                //How many decimals to show.\n//     string public symbol;                 //An identifier: eg SBX\n\n//     constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string  memory _tokenSymbol) {\n//         balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n//         totalSupply = _initialAmount;                        // Update total supply\n//         name = _tokenName;                                   // Set the name for display purposes\n//         decimals = _decimalUnits;                            // Amount of decimals for display purposes\n//         symbol = _tokenSymbol;                               // Set the symbol for display purposes\n//     }\n\n//     function transfer(address _to, uint256 _value) public override returns (bool success) {\n//         require(balances[msg.sender] >= _value, \"token balance is lower than the value requested\");\n//         balances[msg.sender] -= _value;\n//         balances[_to] += _value;\n//         emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n//         return true;\n//     }\n\n//     function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\n//         uint256 allowance = allowed[_from][msg.sender];\n//         require(balances[_from] >= _value && allowance >= _value, \"token balance or allowance is lower than amount requested\");\n//         balances[_to] += _value;\n//         balances[_from] -= _value;\n//         if (allowance < MAX_UINT256) {\n//             allowed[_from][msg.sender] -= _value;\n//         }\n//         emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n//         return true;\n//     }\n\n//     function balanceOf(address _owner) public override view returns (uint256 balance) {\n//         return balances[_owner];\n//     }\n\n//     function approve(address _spender, uint256 _value) public override returns (bool success) {\n//         allowed[msg.sender][_spender] = _value;\n//         emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n//         return true;\n//     }\n\n//     function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\n//         return allowed[_owner][_spender];\n//     }\n// }",
  "sourcePath": "/Users/nikolaoszisis/Desktop/Projects/Github/dApp/ERC20-swap/src/contracts/EthSwap.sol",
  "ast": {
    "absolutePath": "/Users/nikolaoszisis/Desktop/Projects/Github/dApp/ERC20-swap/src/contracts/EthSwap.sol",
    "exportedSymbols": {
      "EthSwap": [
        5
      ]
    },
    "id": 6,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "73:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5,
        "linearizedBaseContracts": [
          5
        ],
        "name": "EthSwap",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 5,
            "src": "121:47:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 2,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "121:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4574685377617020496e7374616e742045786368616e6765",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "142:26:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_0cd767832a4b45e13c98bb05545343ab53826a9ea9075205b12bb04a1062f40e",
                "typeString": "literal_string \"EthSwap Instant Exchange\""
              },
              "value": "EthSwap Instant Exchange"
            },
            "visibility": "public"
          }
        ],
        "scope": 6,
        "src": "98:74:0"
      }
    ],
    "src": "73:5026:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/nikolaoszisis/Desktop/Projects/Github/dApp/ERC20-swap/src/contracts/EthSwap.sol",
      "exportedSymbols": {
        "EthSwap": [
          5
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".0"
          ]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "73:23:0"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            5
          ],
          "name": "EthSwap",
          "scope": 6
        },
        "children": [
          {
            "attributes": {
              "constant": false,
              "name": "name",
              "scope": 5,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "string",
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "name": "string",
                  "type": "string"
                },
                "id": 2,
                "name": "ElementaryTypeName",
                "src": "121:6:0"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "4574685377617020496e7374616e742045786368616e6765",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "string",
                  "type": "literal_string \"EthSwap Instant Exchange\"",
                  "value": "EthSwap Instant Exchange"
                },
                "id": 3,
                "name": "Literal",
                "src": "142:26:0"
              }
            ],
            "id": 4,
            "name": "VariableDeclaration",
            "src": "121:47:0"
          }
        ],
        "id": 5,
        "name": "ContractDefinition",
        "src": "98:74:0"
      }
    ],
    "id": 6,
    "name": "SourceUnit",
    "src": "73:5026:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x42f6059c30d8f31762c93a2124545AF13a957d8E",
      "transactionHash": "0x72f69511fd8f37b1e89f8970b1abbe529fcd9c6dc0b5378048d4712b85e08942"
    }
  },
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-04-21T23:35:51.437Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}